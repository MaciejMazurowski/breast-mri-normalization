
#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Fri Sep  1 13:29:11 2017

@author: jun
"""

import torch 
import torch.nn as nn

class UNet3D(nn.Module):
    def __init__(self, in_channel, n_classes):
        self.in_channel = in_channel
        self.n_classes = n_classes
        self.start_channel = 32
        
        super(UNet3D, self).__init__()
        self.eninput = self.encoder(self.in_channel, self.start_channel, bias=False, batchnorm=True)
        self.ec1 = self.encoder(self.start_channel, self.start_channel, bias=False, batchnorm=True)
        self.ec2 = self.encoder(self.start_channel, self.start_channel*2, bias=False, batchnorm=True)
        self.ec3 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec4 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec5 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec6 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec7 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec8 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.ec9 = self.encoder(self.start_channel*2, self.start_channel*2, bias=False, batchnorm=True)
        self.pool = nn.MaxPool3d(2)
        
        self.dc1 = self.encoder(self.start_channel*2+self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc2 = self.encoder(self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc3 = self.encoder(self.start_channel*2+self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc4 = self.encoder(self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc5 = self.encoder(self.start_channel*2+self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc6 = self.encoder(self.start_channel*2, self.start_channel*2, kernel_size=3, stride=1, bias=False)
        self.dc7 = self.encoder(self.start_channel*2+self.start_channel*1, self.start_channel*2, kernel_size=3, stride=1,padding=1, bias=False)
        self.dc8 = self.encoder(self.start_channel*2, self.start_channel*1, kernel_size=3, stride=1,padding=1, bias=False)
        self.dc9 = self.outputs(self.start_channel*1, self.n_classes, kernel_size=3, stride=1,padding=1, bias=False)

    def encoder(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1,
                bias=False, batchnorm=True):
        if batchnorm:
            layer = nn.Sequential(
                nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias),
                nn.BatchNorm3d(out_channels),
                nn.ReLU())
        else:
            layer = nn.Sequential(
                nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias),
                nn.ReLU())
        return layer

    def outputs(self, in_channels, out_channels, kernel_size=3, stride=1, padding=0,
                bias=False, batchnorm=True):
        if batchnorm:
            layer = nn.Sequential(
                nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias),
                nn.BatchNorm3d(out_channels),
                nn.Sigmoid())
        else:
            layer = nn.Sequential(
                nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, bias=bias),
                nn.Sigmoid())
        return layer

    def forward(self, x):
        e0 = self.eninput(x)
        e0 = self.ec1(e0)
        
        e1 = self.pool(e0)
        e1 = self.ec2(e1)
        e1 = self.ec3(e1)


        e2 = self.pool(e1)
        e2 = self.ec4(e2)
        e2 = self.ec5(e2)

        e3 = self.pool(e2)
        e3 = self.ec6(e3)
        e3 = self.ec7(e3)

        e4 = self.pool(e3)
        e4 = self.ec8(e4)
        e4 = self.ec9(e4)

        d0 = torch.cat((nn.functional.upsample(e4,scale_factor=2), e3), 1)


        d0 = self.dc1(d0)
        d0 = self.dc2(d0)


        d1 = torch.cat((nn.functional.upsample(d0,scale_factor=2),e2), 1)

        d1 = self.dc3(d1)
        d1 = self.dc4(d1)

        d2 = torch.cat((nn.functional.upsample(d1,scale_factor=2),e1), 1)

        d2 = self.dc5(d2)
        d2 = self.dc6(d2)
        
        d3 = torch.cat((nn.functional.upsample(d2,scale_factor=2),e0), 1)

        d3 = self.dc7(d3)
        d3 = self.dc8(d3)
        d3 = self.dc9(d3)
        
        return d3
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    